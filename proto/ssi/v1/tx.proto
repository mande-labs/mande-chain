syntax = "proto3";
package mandechain.ssi;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "mande-chain/x/ssi/types";

import "ssi/v1/schema.proto";
import "ssi/v1/did.proto";
import "ssi/v1/credential.proto";

// Msg defines the Msg service.
service Msg {
  rpc CreateDID(MsgCreateDID) returns (MsgCreateDIDResponse);
  rpc UpdateDID(MsgUpdateDID) returns (MsgUpdateDIDResponse);
  rpc CreateSchema(MsgCreateSchema) returns (MsgCreateSchemaResponse);
  rpc DeactivateDID(MsgDeactivateDID) returns (MsgDeactivateDIDResponse);
  rpc RegisterCredentialStatus(MsgRegisterCredentialStatus) returns (MsgRegisterCredentialStatusResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgCreateDID {
  Did didDocString = 1;
  repeated SignInfo signatures = 2;
  string creator = 3;
  string clientSpec = 4;
}

message MsgCreateDIDResponse {
  uint64 id = 1;
}

message MsgUpdateDID {
  Did didDocString = 1;
  string version_id = 2;
  repeated SignInfo signatures = 3;
  string creator = 4;
  string clientSpec = 5;
}

message MsgUpdateDIDResponse {
  string updateId = 1;
}

message MsgCreateSchema {
  string creator = 1;
  SchemaDocument schemaDoc = 2;
  SchemaProof schemaProof = 3;
  string clientSpec = 4;
}

message MsgCreateSchemaResponse {
  uint64 id = 1;
}

message MsgDeactivateDID {
  string creator = 1;
  string didId = 2;
  string version_id = 3;
  repeated SignInfo signatures = 4;
  string clientSpec = 5;
}

message MsgDeactivateDIDResponse {
  uint64 id = 1;
}

message MsgRegisterCredentialStatus {
  string creator = 1;
  CredentialStatus credentialStatus = 2;
  CredentialProof proof = 3;
  string clientSpec = 4;
}

message MsgRegisterCredentialStatusResponse {
  uint64 id = 1;
}

// this line is used by starport scaffolding # proto/tx/message