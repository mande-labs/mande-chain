syntax = "proto3";
package mandechain.oracle;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "oracle/network_constant.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "mande-chain/x/oracle/types";

// Msg defines the Msg service.
service Msg {
      rpc NetworkConstantData(MsgNetworkConstantData) returns (MsgNetworkConstantDataResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgNetworkConstantData {
  string creator = 1;
  uint64 oracle_script_id = 2 [
    (gogoproto.customname) = "OracleScriptID",
    (gogoproto.moretags) = "yaml:\"oracle_script_id\""
  ];
  string source_channel = 3;
  NetworkConstantCallData calldata = 4;
  uint64 ask_count = 5;
  uint64 min_count = 6;
  repeated cosmos.base.v1beta1.Coin fee_limit = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  uint64 prepare_gas = 8;
  uint64 execute_gas = 9;
  string client_id = 10 [(gogoproto.customname) = "ClientID"];
}

message MsgNetworkConstantDataResponse {
}

// this line is used by starport scaffolding # proto/tx/message
