syntax = "proto3";
package mandechain.voting;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "voting/params.proto";
import "voting/vote_book.proto";
import "voting/aggregate_votes_casted.proto";
import "voting/aggregate_votes_received.proto";
// this line is used by starport scaffolding # 1

option go_package = "mande-chain/x/voting/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mande-chain/voting/params";
  }
  // Queries a VoteBook by index.
	rpc VoteBook(QueryGetVoteBookRequest) returns (QueryGetVoteBookResponse) {
		option (google.api.http).get = "/mande-chain/voting/vote_book/{index}";
	}

	// Queries a list of VoteBook items.
	rpc VoteBookAll(QueryAllVoteBookRequest) returns (QueryAllVoteBookResponse) {
		option (google.api.http).get = "/mande-chain/voting/vote_book";
	}

// Queries a AggregateVotesCasted by index.
	rpc AggregateVotesCasted(QueryGetAggregateVotesCastedRequest) returns (QueryGetAggregateVotesCastedResponse) {
		option (google.api.http).get = "/mande-chain/voting/aggregate_votes_casted/{index}";
	}

	// Queries a list of AggregateVotesCasted items.
	rpc AggregateVotesCastedAll(QueryAllAggregateVotesCastedRequest) returns (QueryAllAggregateVotesCastedResponse) {
		option (google.api.http).get = "/mande-chain/voting/aggregate_votes_casted";
	}

// Queries a AggregateVotesReceived by index.
	rpc AggregateVotesReceived(QueryGetAggregateVotesReceivedRequest) returns (QueryGetAggregateVotesReceivedResponse) {
		option (google.api.http).get = "/mande-chain/voting/aggregate_votes_received/{index}";
	}

	// Queries a list of AggregateVotesReceived items.
	rpc AggregateVotesReceivedAll(QueryAllAggregateVotesReceivedRequest) returns (QueryAllAggregateVotesReceivedResponse) {
		option (google.api.http).get = "/mande-chain/voting/aggregate_votes_received";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetVoteBookRequest {
	  string index = 1;

}

message QueryGetVoteBookResponse {
	VoteBook voteBook = 1 [(gogoproto.nullable) = false];
}

message QueryAllVoteBookRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllVoteBookResponse {
	repeated VoteBook voteBook = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetAggregateVotesCastedRequest {
	  string index = 1;

}

message QueryGetAggregateVotesCastedResponse {
	AggregateVotesCasted aggregateVotesCasted = 1 [(gogoproto.nullable) = false];
}

message QueryAllAggregateVotesCastedRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAggregateVotesCastedResponse {
	repeated AggregateVotesCasted aggregateVotesCasted = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetAggregateVotesReceivedRequest {
	  string index = 1;

}

message QueryGetAggregateVotesReceivedResponse {
	AggregateVotesReceived aggregateVotesReceived = 1 [(gogoproto.nullable) = false];
}

message QueryAllAggregateVotesReceivedRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAggregateVotesReceivedResponse {
	repeated AggregateVotesReceived aggregateVotesReceived = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
