syntax = "proto3";
package mandechain.ssi;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "ssi/v1/schema.proto";
import "ssi/v1/did.proto";
import "ssi/v1/credential.proto";

option go_package = "mande-chain/x/ssi/types";

// Query defines the gRPC querier service.
service Query {
  // Get the Schema Document for a specified schema id
	rpc QuerySchema(QuerySchemaRequest) returns (QuerySchemaResponse) {
		option (google.api.http).get = "/mande-chain/ssi/schema/{schemaId}";
	}

  // Get the count and list of registered Schemas
	rpc QuerySchemas(QuerySchemasRequest) returns (QuerySchemasResponse) {
		option (google.api.http).get = "/mande-chain/ssi/schema";
	}

  // Get the Did Document for a specified DID id
	rpc QueryDidDocument(QueryDidDocumentRequest) returns (QueryDidDocumentResponse) {
		option (google.api.http).get = "/mande-chain/ssi/did/{didId}";
	}

  // Get the count and list of registered Did Documents
  rpc QueryDidDocuments(QueryDidDocumentsRequest) returns (QueryDidDocumentsResponse) {
    option (google.api.http).get = "/mande-chain/ssi/did";
  }

  // Get the Credential Status for a given credential id
  rpc QueryCredential(QueryCredentialRequest) returns (QueryCredentialResponse) {
    option (google.api.http).get = "/mande-chain/ssi/credential/{credId}";
  }

  // Get all the registed Credential Statuses
  rpc QueryCredentials(QueryCredentialsRequest) returns (QueryCredentialsResponse) {
    option (google.api.http).get = "/mande-chain/ssi/credential";
  }
}

// Schema Messages

message QuerySchemaRequest {
  string schemaId = 1;
}

message QuerySchemaResponse {
  repeated Schema schema = 1;
}

message QuerySchemasRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QuerySchemasResponse {
  uint64 totalCount = 1;
  repeated Schema schemaList = 2;
}

// Credential Messages

message QueryCredentialRequest {
  string credId = 1;
}

message QueryCredentialResponse {
  Credential credStatus = 1;
}

message QueryCredentialsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryCredentialsResponse {
  uint64 totalCount = 1;
  repeated Credential credentials = 2;
}

// Did Document Messages

message QueryDidDocumentRequest {
  string didId = 1;
}

message QueryDidDocumentResponse {
  Did didDocument = 1;
  Metadata didDocumentMetadata = 2;
}

message QueryDidDocumentsRequest {
  bool count = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryDidDocumentsResponse {
  uint64 totalDidCount = 1;
  repeated QueryDidDocumentResponse didDocList = 2;
}

// this line is used by starport scaffolding # 3
